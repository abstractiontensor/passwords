#!/bin/bash

#Constants
#SHOW_TABLE='.headers on\n.mode column\n.width 5 25 15 32 32\n'
ENC_EXT='.gpg'

#/Constants

#Global variables
PASSKEY=''
QUERY=''
#/Global variables

#Functions
checkPrereqs() {
	which sqlite3 >> /dev/null

	if (($? != "0")); then
		echo "sqlite3 is not installed!"
		exit 13
	fi
}

getConfig() {
	if !(test -f ~/.passwords); then
		#Creating default config.
		echo "Could not find conifg file. Creating..."
		echo $'#This is the main and the only config for "passwords".\n'\
			$'DB_PATH=./passwords.sql3\n'\
			$'TABLE_MODE=ON\n'\
			> ~/.passwords
	fi
		#Getting config.
	source ~/.passwords
		#Parsing config.
	case $TABLE_MODE in
		ON)
			SHOW_TABLE='.headers on;\n.mode column;\n.width 5 25 15 32 32;\n'
		;;
		OFF)
			SHOW_TABLE=''
		;;
	esac
	
	ENC_DB_PATH=$DB_PATH''$ENC_EXT
}

checkDBorCreate() {
	if test -f $ENC_DB_PATH; then
		return
	fi
	
	#Fuck my brain, the decrypted file was found!
	rm -f $DB_PATH >> /dev/null
	
	echo "Database is absent. Let's create the new one."
	echo "CREATE TABLE ACCOUNT( "\
	"ID INTEGER PRIMARY KEY AUTOINCREMENT, "\
	"SERVICE TEXT NOT NULL, "\
	"USER TEXT NOT NULL, "\
	"PASSWORD NOT NULL, "\
	"ETC TEXT);" | sqlite3 $DB_PATH
	
	gpg -c --cipher-algo AES256 --no-verbose -o $ENC_DB_PATH $DB_PATH
	rm -f $DB_PATH >> /dev/null
}

getPasskey() {
	echo -n "Enter database passkey: "
	read -s PASSKEY
	echo ""
}

#Function sqlite3 wrapped in decrypt-encrypt methods.
sqlite3crypt() {
	#Query
	#echo $"$1"
	gpg -d --cipher-algo AES256 --quiet --passphrase=$PASSKEY\
 -o $DB_PATH $ENC_DB_PATH >> /dev/null
	
	if (($? != 0)); then
		return $?
	fi
	
	echo ''
	#Executing the query
	#If formatted, using columns and headers.
	#Saving lines count into the variable.
	echo $'.headers on\n.mode column\n.width 5 25 15 32 32\n'\
$"$1" | sqlite3 $DB_PATH
	rm $ENC_DB_PATH
	gpg -c --cipher-algo AES256 --quiet --passphrase=$PASSKEY\
 -o $ENC_DB_PATH $DB_PATH
	rm $DB_PATH
}

showHelp() {
	echo "This utility is to store your passwords in gpg "\
	"ciphered sqlite3 database. Requires sqlite3 package."
}

showUsage() {
	echo "Usage: {help|add|delete|change|list|find|}"
}

addNewKey() {
	#Double comma wrapping.
	SERVICE='"'$1'"'
	USER='"'$2'"'
	PASSWORD='"'$3'"'
	ETC='"'$4'"'
	#Inserting.
	QUERY=`echo "INSERT INTO ACCOUNT (SERVICE, USER, PASSWORD, ETC) "\
	"VALUES ($SERVICE, $USER, $PASSWORD, $ETC);"`
	sqlite3crypt "$QUERY"
}

changePassword() {
	#Double comma wrapping.
	SERVICE='"'$1'"'
	USER='"'$2'"'
	PASSWORD='"'$3'"'
	ETC='"'$4'"'
	
	QUERY=`echo 'SELECT * FROM ACCOUNT '\
	'WHERE SERVICE = '$SERVICE' AND USER = '$USER';'`
	RECORD=`sqlite3crypt "$QUERY"`
	#If row is absent
	if test -z "$RECORD"; then
		echo "There is no key with such properties"
		return 2
	fi
	
	echo $'Your record to modify is:\n'"$RECORD"

	echo -n "Are you going to change this record? [Y/N]: "	
	read answer
	echo ''
	case "$answer" in
		y|Y)
			#Modifying.
			QUERY=`echo "UPDATE ACCOUNT SET PASSWORD=$PASSWORD, ETC=$ETC"\
			"WHERE SERVICE=$SERVICE AND USER=$USER;"`
			sqlite3crypt "$QUERY"
			echo "Modified."
		;;
		*)
			echo "Cancelled."
			return
		;;
	esac

}

listSmth() {
	#Choosing the args based query.
	case $1 in
		all)
			QUERY='SELECT * FROM ACCOUNT;'
			;;
		
		services)
			QUERY='SELECT SERVICE, COUNT(*) as RECORDS FROM ACCOUNT GROUP BY SERVICE;'
			;;
		
		users)
			QUERY='SELECT USER, COUNT(*) as RECORDS FROM ACCOUNT GROUP BY USER;'
			;;
		
	esac
	
	#Executing SELECT query.
	if test -n "$QUERY"; then
		sqlite3crypt "$QUERY"
	fi
}

findSmth() {
	#Preparing the query.
	QUERY='SELECT * FROM ACCOUNT WHERE (SERVICE LIKE "%'$1'%") OR (USER LIKE "%'$1'%");'
	
	#Executing SELECT query.
	sqlite3crypt "$QUERY"
}

deleteRecord() {
	#Searching the query
	QUERY='SELECT * FROM ACCOUNT WHERE ID='$1';'
	RECORD=`sqlite3crypt "$QUERY"`
	
	#If row is absent
	if test -z "$RECORD"; then
		echo "There is no row with such ID: "$1
		return 2
	fi
	
	echo $'Your record to delete is:\n'"$RECORD"
	
	echo -n "Do you want to purge it? [Y/N]"
	read answer
	case "$answer" in
		y|Y)
			#Preparing the DELETE query.
			QUERY='DELETE FROM ACCOUNT WHERE ID='$1';'
			sqlite3crypt "$QUERY"
			echo "Row "$1" was successfully deleted."
		;;
		*)
			echo "Cancelled."
			return
		;;
	esac
}

#/Functions

# --------------------------------- #
# int main (int argc,  char** argv) #
# --------------------------------- #

#Checking sqlite3 presence.
checkPrereqs

#Getting config
getConfig

#Checking DB presence.
checkDBorCreate

#Shows help message if no arguments are.
if (($# == 0)); then
	showHelp
	showUsage
	exit 0;
fi

#Main actions
case $1 in

	#Shows usage message.
	help)
		showUsage
		;;
	
	#Adds new key.
	add)
		#Checking parameters.
		if (($# == 4 || $# == 5)); then
			getPasskey
			addNewKey $2 $3 $4 $5
		else
			echo "Usage: {add <service> <user> <password> <etc> (optional)}"
			exit 1
		fi
		;;
	
	#Lists smth.
	list)
		if (($# == 1)); then
			echo "Usage: {list all|services|users}"
			exit 1
		fi
			getPasskey
			listSmth $2
		;;
	
	#Finds smth.
	find)
		if (($# == 1)); then
			echo "Usage: {find <smth>}"
			exit 1
		fi
			getPasskey
			findSmth $2
		;;
	
	#Deletes record.
	delete)
		#Checking parameters.
		if (($# == 1)); then
			echo "Usage: {delete <id>}"
			exit 1
		fi
			getPasskey
			deleteRecord $2
		;;
	
	#Deletes record.
	change)
		#Checking parameters.
		if (($# == 4 || $# == 5)); then
			getPasskey
			changePassword $2 $3 $4 $5
		else
			echo "Usage: {change <service> <user> <password> <etc> (optional)}"
			exit 1
		fi
		;;
	
	#Shows usage message.
	*)
		showUsage
		;;
		
esac

exit 0
